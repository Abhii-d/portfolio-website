{
  "projects": [
      {
        "id": "mb-script-monitor",
        "name": "MB Script - Muscle Blaze Price Monitor",
        "description": "A Telegram-integrated price monitoring tool for MuscleBlaze supplements with smart alerts.",
        "longDescription": "A TypeScript-based automation script that monitors price changes on MuscleBlaze whey protein products and sends Telegram alerts when thresholds are met. It includes smart price tracking, user notification, historical logging, error handling, and configurable environment setup. Designed for efficient deployment using PM2 or cron jobs, the script provides reliable price monitoring with minimal user effort.",
        "technologies": [
          "TypeScript",
          "Node.js",
          "Telegram Bot API",
          "Web Scraping",
          "PM2",
          "dotenv",
          "JavaScript",
          "HTML"
        ],
        "features": [
          "Real-time price tracking for MuscleBlaze supplements",
          "Telegram alerts for percentage and absolute price drops",
          "Scheduled monitoring with retry logic and failure handling",
          "Historical price tracking with database support",
          "User-configurable environment settings via .env",
          "Supports both personal chat and Telegram channel alerts"
        ],
        "challenges": [
          "Bypassing anti-bot scraping protections",
          "Managing asynchronous Telegram notifications reliably",
          "Scheduling precise monitoring intervals across deployment methods"
        ],
        "liveUrl": "",
        "githubUrl": "https://github.com/Abhii-d/MB-script-main",
        "imageUrl": "/images/projects/mb-script.jpg",
        "featured": true,
        "status": "completed",
        "category": "automation",
        "icon": {
          "viewBox": "0 0 24 24",
          "path": "M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z",
          "color": "text-primary-600"
        }
      }
    ,
    {
      "id": "ecommerce-api",
      "name": "E-commerce REST API",
      "description": "Scalable REST API for e-commerce platform with advanced features like inventory management and payment processing.",
      "longDescription": "A comprehensive backend solution for e-commerce applications built with Node.js and PostgreSQL. Includes user authentication, product catalog management, shopping cart functionality, order processing, and payment integration.",
      "technologies": [
        "Node.js",
        "TypeScript",
        "Express.js",
        "PostgreSQL",
        "Redis",
        "JWT",
        "Stripe API",
        "Docker"
      ],
      "features": [
        "User authentication and authorization",
        "Product catalog with search and filtering",
        "Shopping cart and wishlist functionality",
        "Order management system",
        "Payment processing with Stripe",
        "Inventory tracking and management",
        "Admin dashboard API endpoints"
      ],
      "challenges": [
        "Implementing secure payment processing",
        "Optimizing database queries for large catalogs",
        "Handling concurrent inventory updates"
      ],
      "liveUrl": "",
      "githubUrl": "https://github.com/abhishek-dongare/ecommerce-api",
      "imageUrl": "/images/projects/ecommerce-api.jpg",
      "featured": true,
      "status": "completed",
      "category": "backend",
      "icon": {
        "viewBox": "0 0 24 24",
        "path": "M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2",
        "color": "text-primary-600"
      }
    },
    {
      "id": "weather-app",
      "name": "Weather App",
      "description": "A TypeScript-based web app that displays real-time weather based on current or user-provided location.",
      "longDescription": "An interactive frontend weather application built with TypeScript that fetches weather conditions based on the user's current geolocation or a text-based location input. It integrates free geolocation APIs and weather data services to provide accurate, up-to-date weather summaries with a user-friendly interface. Designed for simplicity and responsiveness, the app is deployed on Netlify and works across devices.",
      "technologies": [
        "TypeScript",
        "JavaScript",
        "HTML",
        "CSS",
        "Geolocation API",
        "OpenWeatherMap API"
      ],
      "features": [
        "Fetches weather data based on current geolocation",
        "Supports manual city name input for weather lookup",
        "Simple and clean user interface with live data",
        "Responsive design for mobile and desktop devices",
        "Error handling for invalid or unreachable locations"
      ],
      "challenges": [
        "Accurately determining user location via browser APIs",
        "Handling edge cases like missing or invalid city names",
        "Integrating and formatting third-party weather data cleanly"
      ],
      "liveUrl": "https://weatherteller.netlify.app/",
      "githubUrl": "https://github.com/Abhii-d/weather-app-Node-js",
      "imageUrl": "/images/projects/weather-app.jpg",
      "featured": false,
      "status": "completed",
      "category": "web",
      "icon": {
        "viewBox": "0 0 24 24",
        "path": "M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9",
        "color": "text-primary-600"
      }
    },
    {
      "id": "task-manager",
      "name": "Task Manager",
      "description": "A calendar-style task management web app to organize tasks by date.",
      "longDescription": "An interactive and easy-to-use task manager application inspired by Google Calendar UI. It allows users to create, view, and manage tasks on specific dates. Built for simplicity and productivity, the app helps users stay organized by visually mapping tasks to their respective days. Designed with a clean interface and responsive layout, it's ideal for both personal and professional task tracking.",
      "technologies": [
        "JavaScript",
        "HTML",
        "CSS",
        "Netlify"
      ],
      "features": [
        "Create and manage tasks associated with specific dates",
        "Calendar-style layout for intuitive task visualization",
        "Clean, minimal UI inspired by Google Calendar",
        "Responsive design for desktop and mobile users",
        "Persistent task storage across sessions (if implemented)"
      ],
      "challenges": [
        "Creating a dynamic, responsive calendar layout",
        "Ensuring intuitive task input and date selection UX",
        "Balancing simplicity with core task management features"
      ],
      "liveUrl": "https://task-mananger.netlify.app/",
      "githubUrl": "https://github.com/Abhii-d/Task-manager",
      "imageUrl": "/images/projects/task-manager.jpg",
      "featured": false,
      "status": "completed",
      "category": "web",
      "icon": {
        "viewBox": "0 0 24 24",
        "path": "M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2",
        "color": "text-green-600"
      }
    }
  ]
}
